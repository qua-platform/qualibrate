[tool.poetry]
name = "qualibrate"
version = "0.3.0"
description = "Qubit calibration software"
authors = ["Quantum Machines <info@quantum-machines.co>"]
repository = "https://github.com/qua-platform/qualibrate"
packages = [{ include = "qualibrate_composite" }]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10,<3.13"
fastapi = "^0.117.1"
uvicorn = "^0.37.0"
pydantic = "^2.11.9"
pydantic-settings = "^2.11.0"
click = "^8.1.7,<8.2.0"
tomli = { version = "^2.0.1", python = "<3.11" }
tomli-w = "^1.0.0"
a2wsgi = "^1.10.8"
qualibrate-core = "0.4.0"
qualibrate-runner = "0.4.0"
qualibrate-app = "0.4.0"
qualibrate-config = "0.1.7"

[tool.poetry.group.dev.dependencies]
mypy = "^1.18.2"
ruff = "^0.13.1"
poethepoet = "^0.37.0"

#[tool.poetry.group.qm-dev.dependencies]
#qualibrate-config = {path = "../qualibrate-config", develop = true}
#qualibrate-app = {path = "../qualibrate-app/backend", develop = true}
#qualibrate-runner = {path = "../qualibrate-runner", develop = true}
#qualibrate-core = {path = "../qualibrate-core", develop = true}
#qua-dashboards = { path = "../qua-dashboards", develop = true }

[tool.poetry.group.test.dependencies]
pytest = "^8.4.2"
pytest-mock = "^3.15.1"

[tool.poetry.scripts]
qualibrate = "qualibrate_composite.__main__:main"


[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
exclude = ['tests/']
plugins = ['pydantic.mypy']

[[tool.mypy.overrides]]
# TODO: add py.typed to json_timeline_database and remove from ignore imports
module = [
    "jsonpatch",
    "jsonpointer",
    "json_timeline_database.*",
    "qua_dashboards.*",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 80
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle
    "F",   # Pyflakes
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
    "I",   # isort
]

[tool.ruff.lint.pycodestyle]
max-line-length = 80
max-doc-length = 80

[tool.poe.tasks]
lint = "ruff check ."
lint-fix = "ruff check --fix ."
format = "ruff format --check ."
format-fix = "ruff format ."
type = "mypy ."
check.sequence = ["lint", "format", "type"]
fix.sequence = ["lint-fix", "format-fix", "type"]
fix.ignore_fail = "return_non_zero"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
